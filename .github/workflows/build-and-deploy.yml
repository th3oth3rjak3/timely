name: Build and Release Timely

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Rust environment
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Install Node.js (for Tauri frontend)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      # Install dependencies on Ubuntu
      - name: Install Ubuntu Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y libwebkit2gtk-4.1-dev \
                             build-essential \
                             curl \
                             wget \
                             file \
                             libxdo-dev \
                             libssl-dev \
                             libayatana-appindicator3-dev \
                             librsvg2-dev

      # Install dependencies
      - name: Install Dependencies
        run: npm install

      # Install Tauri CLI
      - name: Install Tauri CLI
        run: npm install --global @tauri-apps/cli

      # Build Tauri application
      - name: Build Timely
        run: npm run tauri build

      # Archive Windows artifacts
      - name: Archive Windows Artifacts
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path src-tauri/target/release/bundle/msi/* -DestinationPath timely-windows.zip

      # Archive macOS artifacts
      - name: Archive macOS Artifacts
        if: runner.os == 'macOS'
        run: |
          zip -r timely-macos.zip src-tauri/target/release/bundle/dmg

      # Archive Linux artifacts
      - name: Archive Linux Artifacts
        if: runner.os == 'Linux'
        run: |
          zip -r timely-linux.zip src-tauri/target/release/bundle/appimage

      # Upload build artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: timely-${{ matrix.os }}
          path: "*.zip"

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-22.04
    steps:
      # Download all build artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # Create Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
